/**
 * Spreadsheet Processor
 * Processa planilhas Excel e extrai dados de or√ßamentos
 */

/**
 * Converter data do Excel para JavaScript
 */
function excelDateToJSDate(excelDate) {
    // Excel armazena datas como n√∫mero de dias desde 01/01/1900
    const date = new Date((excelDate - 25569) * 86400 * 1000);
    return date;
}

/**
 * Parsear data de string DD/MM/YYYY
 */
function parseDate(dateStr) {
    if (!dateStr) return null;
    
    if (typeof dateStr === 'number') {
        return excelDateToJSDate(dateStr);
    }
    
    if (typeof dateStr === 'string') {
        // Formato DD/MM/YYYY
        const parts = dateStr.split('/');
        if (parts.length === 3) {
            const [day, month, year] = parts;
            return new Date(year, month - 1, day);
        }
    }
    
    return null;
}

/**
 * Verificar se linha atende regras de tr√°fego
 */
function matchesTrafficRules(row, trafficSources, customKeywords) {
    const colL = (row.L || "").toString().trim();
    const colLLower = colL.toLowerCase();
    const colK = (row.K || "").toString().toLowerCase();
    
    // Regra 1: C√©lulas vazias (sem fonte definida)
    if (trafficSources.empty && colL === "") {
        return true;
    }
    
    // Regra 2: C√©lulas com "..."
    if (trafficSources.dots && colL === "...") {
        return true;
    }
    
    // Regra 3: Fontes de tr√°fego padr√£o (coluna L)
    const platforms = [];
    if (trafficSources.facebook) platforms.push("facebook");
    if (trafficSources.instagram) platforms.push("instagram");
    if (trafficSources.google) platforms.push("google");
    if (trafficSources.revista) platforms.push("revista");
    
    const matchesPlatform = platforms.some(platform => 
        colLLower.includes(platform)
    );
    
    // Regra 4: "Outros" + palavras-chave personalizadas
    let matchesCustom = false;
    if (customKeywords && customKeywords.enabled && colLLower.includes("outros")) {
        matchesCustom = customKeywords.terms.some(term => 
            colK.includes(term.toLowerCase())
        );
    }
    
    return matchesPlatform || matchesCustom;
}

/**
 * Verificar se linha √© SOMENTE manuten√ß√£o ortod√¥ntica (para exclus√£o)
 * Exclui apenas se for SOMENTE manuten√ß√£o, sem outros procedimentos
 */
function isMaintenanceProcedure(row) {
    const colH = (row.H || "").toString().trim();
    const colHLower = colH.toLowerCase();
    
    const maintenanceTerms = [
        "manuten√ß√£o aparelho m√≥vel",
        "manuten√ß√£o aparelho ortod√¥ntico autoligado",
        "manuten√ß√£o aparelho ortod√¥ntico safira",
        "manuten√ß√£o ortod√¥ntica mensal"
    ];
    
    // Verificar se cont√©m algum termo de manuten√ß√£o
    const hasMaintenance = maintenanceTerms.some(term => colHLower.includes(term));
    
    if (!hasMaintenance) {
        return false; // N√£o tem manuten√ß√£o, n√£o excluir
    }
    
    // Verificar se tem v√≠rgula (m√∫ltiplos procedimentos)
    if (colH.includes(',')) {
        return false; // Tem outros procedimentos junto, n√£o excluir
    }
    
    // Verificar se o texto √© exatamente igual a algum termo de manuten√ß√£o (sem outros textos)
    const isOnlyMaintenance = maintenanceTerms.some(term => {
        // Remove espa√ßos extras e compara
        const cleanedH = colHLower.replace(/\s+/g, ' ').trim();
        const cleanedTerm = term.replace(/\s+/g, ' ').trim();
        return cleanedH === cleanedTerm;
    });
    
    return isOnlyMaintenance;
}

/**
 * Processar planilha Excel
 */
export async function processSpreadsheet(file, trafficSources, customKeywords, excludeMaintenance = false) {
    return new Promise((resolve, reject) => {
        console.log('üìä [processSpreadsheet] Iniciando processamento...');
        console.log('üìã Arquivo:', file.name);
        console.log('‚öôÔ∏è Fontes de tr√°fego:', trafficSources);
        console.log('üîç Palavras-chave:', customKeywords);
        console.log('üö´ Excluir manuten√ß√£o:', excludeMaintenance);
        
        const reader = new FileReader();
        
        reader.onload = (e) => {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, {type: 'array'});
                
                // Pegar primeira aba
                const sheetName = workbook.SheetNames[0];
                const sheet = workbook.Sheets[sheetName];
                
                // Converter para JSON (com cabe√ßalhos A, B, C...)
                const rows = XLSX.utils.sheet_to_json(sheet, {header: 'A'});
                
                console.log(`üìÑ ${rows.length} linhas encontradas`);
                
                const rawData = []; // Apenas tr√°fego (para m√©tricas)
                const allData = []; // Todos or√ßamentos (para an√°lise de gaps)
                let minDate = null;
                let maxDate = null;
                
                // Processar cada linha (pular cabe√ßalho)
                rows.forEach((row, index) => {
                    if (index === 0) return; // Skip header
                    
                    // Extrair e validar data (coluna B)
                    const date = parseDate(row.B);
                    if (!date || isNaN(date.getTime())) return;
                    
                    const dateStr = date.toISOString().split('T')[0]; // "2025-10-17"
                    
                    // Atualizar per√≠odo coberto
                    if (!minDate || date < minDate) minDate = date;
                    if (!maxDate || date > maxDate) maxDate = date;
                    
                    // Extrair valor da coluna J
                    let value = 0;
                    if (row.J) {
                        if (typeof row.J === 'number') {
                            value = row.J;
                        } else {
                            const valueStr = row.J.toString()
                                .replace(/\./g, '')
                                .replace(',', '.');
                            value = parseFloat(valueStr) || 0;
                        }
                    }
                    
                    const rowData = {
                        date: dateStr,
                        status: (row.C || "").toString().toUpperCase().trim(),
                        value: value,
                        source: (row.L || "").toString().trim(),
                        observations: (row.K || "").toString().trim(),
                        procedure: (row.H || "").toString().trim()
                    };
                    
                    // Adicionar em allData (TODOS os or√ßamentos)
                    allData.push(rowData);
                    
                    // Verificar se atende regras de tr√°fego (para rawData)
                    if (matchesTrafficRules(row, trafficSources, customKeywords)) {
                        // Excluir manuten√ß√µes se op√ß√£o estiver ativada
                        if (excludeMaintenance && isMaintenanceProcedure(row)) {
                            console.log('üö´ Excluindo manuten√ß√£o:', row.H);
                            return;
                        }
                        
                        rawData.push(rowData);
                    }
                });
                
                const result = {
                    fileName: file.name,
                    rawData: rawData, // Apenas tr√°fego
                    allData: allData, // Todos or√ßamentos
                    periodStart: minDate ? minDate.toISOString().split('T')[0] : null,
                    periodEnd: maxDate ? maxDate.toISOString().split('T')[0] : null,
                    totalBudgets: rawData.length,
                    totalSales: rawData.filter(r => r.status === "APPROVED").length,
                    totalRevenue: rawData.filter(r => r.status === "APPROVED")
                                         .reduce((sum, r) => sum + r.value, 0),
                    uploadedAt: new Date().toISOString()
                };
                
                console.log('‚úÖ [processSpreadsheet] Processamento conclu√≠do');
                console.log(`üìã ${result.totalBudgets} or√ßamentos`);
                console.log(`‚úÖ ${result.totalSales} vendas`);
                console.log(`üí∞ R$ ${result.totalRevenue.toFixed(2)}`);
                console.log(`üìÖ Per√≠odo: ${result.periodStart} a ${result.periodEnd}`);
                
                resolve(result);
            } catch (error) {
                console.error('‚ùå [processSpreadsheet] Erro ao processar:', error);
                reject(error);
            }
        };
        
        reader.onerror = (error) => {
            console.error('‚ùå [processSpreadsheet] Erro ao ler arquivo:', error);
            reject(error);
        };
        
        reader.readAsArrayBuffer(file);
    });
}

/**
 * Mesclar dados novos com existentes
 * Regra: Se a data j√° existe, SUBSTITUI. Se n√£o existe, ADICIONA.
 */
export function mergeSpreadsheetData(existingData, newData) {
    console.log('üîÑ [mergeSpreadsheetData] Iniciando mesclagem...');
    console.log('üìä Dados existentes:', existingData?.rawData?.length || 0, 'linhas de tr√°fego');
    console.log('üìä Dados novos:', newData?.rawData?.length || 0, 'linhas de tr√°fego');
    
    // Se n√£o tem dados existentes, retorna os novos
    if (!existingData || !existingData.rawData || existingData.rawData.length === 0) {
        console.log('‚úÖ Sem dados existentes, usando dados novos');
        return newData;
    }
    
    // Se n√£o tem dados novos, retorna os existentes
    if (!newData || !newData.rawData || newData.rawData.length === 0) {
        console.log('‚ö†Ô∏è Sem dados novos, mantendo existentes');
        return existingData;
    }
    
    // ========== MESCLAR rawData (apenas tr√°fego) ==========
    const existingMap = new Map();
    existingData.rawData.forEach(item => {
        const key = `${item.date}_${item.status}_${item.value}`;
        existingMap.set(key, item);
    });
    
    const mergedRawData = [...existingData.rawData];
    let addedCount = 0;
    let updatedCount = 0;
    
    newData.rawData.forEach(newItem => {
        const key = `${newItem.date}_${newItem.status}_${newItem.value}`;
        
        if (existingMap.has(key)) {
            return;
        }
        
        const existingIndex = mergedRawData.findIndex(item => item.date === newItem.date);
        
        if (existingIndex >= 0) {
            mergedRawData[existingIndex] = newItem;
            updatedCount++;
        } else {
            mergedRawData.push(newItem);
            addedCount++;
        }
    });
    
    mergedRawData.sort((a, b) => a.date.localeCompare(b.date));
    
    // ========== MESCLAR allData (todos or√ßamentos) ==========
    const existingAllMap = new Map();
    (existingData.allData || []).forEach(item => {
        const key = `${item.date}_${item.status}_${item.value}_${item.source}`;
        existingAllMap.set(key, item);
    });
    
    const mergedAllData = [...(existingData.allData || [])];
    
    (newData.allData || []).forEach(newItem => {
        const key = `${newItem.date}_${newItem.status}_${newItem.value}_${newItem.source}`;
        
        if (existingAllMap.has(key)) {
            return;
        }
        
        const existingIndex = mergedAllData.findIndex(item => 
            item.date === newItem.date && 
            item.status === newItem.status && 
            item.value === newItem.value &&
            item.source === newItem.source
        );
        
        if (existingIndex >= 0) {
            mergedAllData[existingIndex] = newItem;
        } else {
            mergedAllData.push(newItem);
        }
    });
    
    mergedAllData.sort((a, b) => a.date.localeCompare(b.date));
    
    // ========== RECALCULAR ESTAT√çSTICAS ==========
    const minDate = mergedRawData.reduce((min, item) => 
        !min || item.date < min ? item.date : min, null);
    const maxDate = mergedRawData.reduce((max, item) => 
        !max || item.date > max ? item.date : max, null);
    
    const totalBudgets = mergedRawData.length;
    const totalSales = mergedRawData.filter(r => r.status === "APPROVED").length;
    const totalRevenue = mergedRawData
        .filter(r => r.status === "APPROVED")
        .reduce((sum, r) => sum + r.value, 0);
    
    console.log(`‚úÖ Mesclagem conclu√≠da:`);
    console.log(`   üìä Tr√°fego: ${mergedRawData.length} linhas`);
    console.log(`   üìä Total geral: ${mergedAllData.length} linhas`);
    console.log(`   ‚ûï Adicionadas: ${addedCount}`);
    console.log(`   üîÑ Atualizadas: ${updatedCount}`);
    console.log(`   üìÖ Per√≠odo: ${minDate} a ${maxDate}`);
    
    return {
        fileName: newData.fileName,
        rawData: mergedRawData,
        allData: mergedAllData,
        periodStart: minDate,
        periodEnd: maxDate,
        totalBudgets: totalBudgets,
        totalSales: totalSales,
        totalRevenue: totalRevenue,
        uploadedAt: new Date().toISOString()
    };
}

/**
 * Validar formato da planilha
 */
export function validateSpreadsheet(file) {
    const validExtensions = ['.xlsx', '.xls'];
    const fileName = file.name.toLowerCase();
    
    const isValid = validExtensions.some(ext => fileName.endsWith(ext));
    
    if (!isValid) {
        throw new Error('Formato inv√°lido. Use arquivos .xlsx ou .xls');
    }
    
    if (file.size > 10 * 1024 * 1024) { // 10MB
        throw new Error('Arquivo muito grande. Tamanho m√°ximo: 10MB');
    }
    
    return true;
}

