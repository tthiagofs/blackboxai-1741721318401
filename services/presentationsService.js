/**
 * Servi√ßo para gerenciar apresenta√ß√µes salvas no Firestore
 */

import { db, auth } from '../config/firebase.js';
import { 
    collection, 
    addDoc, 
    getDocs, 
    getDoc,
    deleteDoc,
    updateDoc,
    doc, 
    query, 
    orderBy,
    where 
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

class PresentationsService {
    /**
     * Salva uma apresenta√ß√£o no projeto
     */
    async savePresentation(projectId, presentationData) {
        try {
            const user = auth.currentUser;
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            console.log('üíæ Salvando apresenta√ß√£o...', presentationData);

            const presentationRef = await addDoc(
                collection(db, 'projects', projectId, 'presentations'),
                {
                    ...presentationData,
                    createdAt: new Date().toISOString(),
                    createdBy: user.uid
                }
            );

            console.log('‚úÖ Apresenta√ß√£o salva com ID:', presentationRef.id);
            return { success: true, id: presentationRef.id };

        } catch (error) {
            console.error('‚ùå Erro ao salvar apresenta√ß√£o:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Lista todas as apresenta√ß√µes de um projeto
     */
    async listPresentations(projectId) {
        try {
            const user = auth.currentUser;
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            console.log('üìã Listando apresenta√ß√µes do projeto:', projectId);

            const presentationsQuery = query(
                collection(db, 'projects', projectId, 'presentations'),
                orderBy('createdAt', 'desc')
            );

            const snapshot = await getDocs(presentationsQuery);
            
            const presentations = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));

            console.log('‚úÖ Apresenta√ß√µes carregadas:', presentations.length);
            return presentations;

        } catch (error) {
            console.error('‚ùå Erro ao listar apresenta√ß√µes:', error);
            throw error;
        }
    }

    /**
     * Deleta uma apresenta√ß√£o
     */
    async deletePresentation(projectId, presentationId) {
        try {
            const user = auth.currentUser;
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            console.log('üóëÔ∏è Deletando apresenta√ß√£o:', presentationId);

            await deleteDoc(doc(db, 'projects', projectId, 'presentations', presentationId));

            console.log('‚úÖ Apresenta√ß√£o deletada com sucesso');
            return { success: true };

        } catch (error) {
            console.error('‚ùå Erro ao deletar apresenta√ß√£o:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Busca uma apresenta√ß√£o espec√≠fica
     */
    async getPresentation(projectId, presentationId) {
        try {
            const user = auth.currentUser;
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            const presentationDoc = await getDoc(doc(db, 'projects', projectId, 'presentations', presentationId));
            
            if (!presentationDoc.exists()) {
                throw new Error('Apresenta√ß√£o n√£o encontrada');
            }

            return {
                id: presentationDoc.id,
                ...presentationDoc.data()
            };

        } catch (error) {
            console.error('‚ùå Erro ao buscar apresenta√ß√£o:', error);
            throw error;
        }
    }

    /**
     * Atualiza uma apresenta√ß√£o
     */
    async updatePresentation(projectId, presentationId, updateData) {
        try {
            const user = auth.currentUser;
            if (!user) {
                throw new Error('Usu√°rio n√£o autenticado');
            }

            console.log('üíæ Atualizando apresenta√ß√£o:', presentationId);

            const presentationRef = doc(db, 'projects', projectId, 'presentations', presentationId);
            await updateDoc(presentationRef, {
                ...updateData,
                updatedAt: new Date().toISOString()
            });

            console.log('‚úÖ Apresenta√ß√£o atualizada com sucesso');
            return { success: true };

        } catch (error) {
            console.error('‚ùå Erro ao atualizar apresenta√ß√£o:', error);
            throw error;
        }
    }
}

export const presentationsService = new PresentationsService();

