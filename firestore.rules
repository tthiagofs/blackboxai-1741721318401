rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Regras para coleção de usuários
    match /users/{userId} {
      // Função para verificar se é admin (pelo email)
      function isAdmin() {
        return request.auth != null && 
               request.auth.token.email == 'thiagofelipefreire0810@gmail.com';
      }
      
      // Permitir leitura individual apenas para o próprio usuário ou admin
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Permitir escrita apenas para o próprio usuário
      allow write, update: if request.auth != null && request.auth.uid == userId;
      
      // Permitir listar todos os usuários apenas para admin
      allow list: if isAdmin();
      
      // Permitir deletar apenas para admin
      allow delete: if isAdmin();
      
      // Regras para subcoleção de templates de análise
      match /analysisTemplates/{templateId} {
        // Permitir CRUD completo apenas para o próprio usuário
        allow read, write, create, update, delete: if request.auth != null && request.auth.uid == userId;
        
        // Permitir admin ler, listar e deletar tudo (para exclusão em cascata)
        allow read, list, delete: if isAdmin();
      }
    }
    
    // Regras para coleção de projetos
    match /projects/{projectId} {
      // Função auxiliar para verificar ownership (aceita ownerId ou userId)
      function isOwner() {
        return request.auth != null && 
               (resource.data.ownerId == request.auth.uid || 
                resource.data.userId == request.auth.uid);
      }
      
      function isCreator() {
        return request.auth != null && 
               (request.resource.data.ownerId == request.auth.uid || 
                request.resource.data.userId == request.auth.uid);
      }
      
      function isProjectOwner() {
        return request.auth != null && 
               (get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid ||
                get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid);
      }
      
      function isAdmin() {
        return request.auth != null && 
               request.auth.token.email == 'thiagofelipefreire0810@gmail.com';
      }
      
      // Permitir leitura para o dono do projeto ou admin
      allow read: if isOwner() || isAdmin();
      
      // Permitir criação se o ownerId/userId for o usuário autenticado
      allow create: if isCreator();
      
      // Permitir atualização apenas para o dono
      allow update: if isOwner();
      
      // Permitir exclusão para o dono ou admin (para exclusão em cascata)
      allow delete: if isOwner() || isAdmin();
      
      // Permitir listar projetos do próprio usuário ou admin pode listar tudo
      allow list: if request.auth != null;
      
      // Regras para subcoleção de relatórios dentro de projetos
      match /reports/{reportId} {
        // Permitir CRUD completo para o dono do projeto ou admin
        allow read: if isProjectOwner() || isAdmin();
        allow write, create, update: if isProjectOwner();
        
        // Permitir deletar para dono do projeto ou admin
        allow delete: if isProjectOwner() || isAdmin();
        
        // Permitir admin listar todos os relatórios
        allow list: if isAdmin();
      }
    }
    
    // Regras para coleção de convites
    match /invites/{inviteId} {
      // Permitir leitura para qualquer pessoa (para verificar convite na tela de cadastro)
      allow read: if true;
      
      // Apenas usuários autenticados podem deletar convites
      allow delete: if request.auth != null;
      
      // Apenas admin pode criar novos convites
      allow create: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Regras para coleção de relatórios
    match /reports/{reportId} {
      // Permitir leitura e escrita apenas para o dono do relatório
      allow read, delete: if request.auth != null && 
                             resource.data.userId == request.auth.uid;
      
      // Permitir criação se o userId for o usuário autenticado
      allow create: if request.auth != null && 
                      request.resource.data.userId == request.auth.uid;
      
      // Permitir atualização apenas para o dono
      allow update: if request.auth != null && 
                      resource.data.userId == request.auth.uid;
    }
  }
}

